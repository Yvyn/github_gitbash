Telegram: yuvynokurov
Termial. HW_1 Client_Server




1) Прочиать про клиент-серверную архитектуру
Клиент — сервер» (англ. client–server) — вычислительная или сетевая архитектура,
 в которой задания или сетевая нагрузка распределены между поставщиками услуг,
 называемыми серверами, и заказчиками услуг, называемыми клиентами. 
Фактически клиент и сервер — это программное обеспечение. Обычно эти программы расположены 
на разных вычислительных машинах и взаимодействуют между собой через вычислительную сеть 
посредством сетевых протоколов, но они могут быть расположены также и на одной машине.
 Программы-серверы ожидают от клиентских программ запросы и предоставляют им свои ресурсы
 в виде данных (например, передача файлов посредством HTTP, FTP, BitTorrent, потоковое
 мультимедиа или работа с базами данных) или в виде сервисных функций (например, работа
 с электронной почтой, общение посредством систем мгновенного обмена сообщениями или
 просмотр web-страниц во всемирной паутине). 



2) Что ткое HTTP и HTTPS
Разница между HTTP и HTTPS
/Сроки и определения /Различие между HTTP и HTTPS

HTTP (с англ. HyperText Transfer Protocol – протокол передачи гипертекста) – это прикладной протокол передачи данных в сети. 
Теперь его используют для получения информации с веб-сайтов. Протокол HTTP основан на использовании 
технологии клиент-сервер: клиент, отправляющий запрос, является инициатором соединения; сервер, получающий запрос, 
выполняет его и отправляет клиенту результат.

HTTPS (с англ. HyperText Transfer Protocol Secure – безопасный протокол передачи гипертекста) – это расширение протокола HTTP, 
поддерживающего шифрование с помощью криптографических протоколов SSL и TLS.
Чем отличаются HTTP от HTTPS

HTTPS не является отдельным протоколом передачи данных, а представляет собой расширение протокола HTTP с надстройкой шифрования;
данные, передаваемые по протоколу HTTP, не защищены, а HTTPS обеспечивает конфиденциальность информации посредством шифрования;
HTTP использует порт 80, HTTPS – порт 443.

Использование HTTPS

Обеспечение безопасной передачи данных нуждаются в сайтах, где вводятся и передают конфиденциальную информацию 
(личные данные пользователей, детали доступа, реквизиты платежных карт) — на любых сайтах с авторизацией, 
взаимодействием с платежными системами, почтовыми сервисами. Шифрование таких данных позволит предотвратить
 их перехват и использование третьими лицами.

Для реализации передачи данных с помощью HTTPS на веб-сервере, обрабатывающем запросы от клиентов, 
должен быть установлен специальный сертификат SSL. Есть сертификаты, защищающие только одно доменное имя.
 Есть сертификаты, которые обеспечивают защиту информации доменного имени и всех его субдоменов — Wildcard SSL. 
Также, если вы решили купить VPS для серьезного бизнес-проекта, то, вероятно, вам понадобится TrueBusinessID with EV сертификат, 
обеспечивающий более высокий уровень безопасности вашего домена и добавляющий зеленую строчку в окне браузера. Шифрование происходит 
в обе стороны — как данные, получаемые клиентом, так и данные, которые он отправляет на сервер.

Наличие SSL сертификата является одним из факторов ранжирования Google, поэтому переход 
на протокол HTTPS влияет на повышение позиций в поисковой выдаче Google.
 Хотя этот фактор не имеет основополагающего значения, его влияние на поисковые результаты может увеличиваться в будущем.

3) HTTP методы

Методы HTTP запроса

HTTP определяет множество методов запроса, которые указывают, какое желаемое действие выполнится
 для данного ресурса. Несмотря на то, что их названия могут быть существительными, 
эти методы запроса иногда называются HTTP глаголами. Каждый реализует свою семантику, 
но каждая группа команд разделяет общие свойства: так, методы могут быть безопасными, идемпотентными или кешируемыми.

GET
    Метод GET запрашивает представление ресурса. Запросы с использованием этого метода могут только извлекать данные.
HEAD
    HEAD запрашивает ресурс так же, как и метод GET, но без тела ответа.
POST
    POST используется для отправки сущностей к определённому ресурсу. 
Часто вызывает изменение состояния или какие-то побочные эффекты на сервере.
PUT

    PUT заменяет все текущие представления ресурса данными запроса.
DELETE
    DELETE удаляет указанный ресурс.
CONNECT

    CONNECT устанавливает "туннель" к серверу, определённому по ресурсу.
OPTIONS
    OPTIONS используется для описания параметров соединения с ресурсом.
TRACE

    TRACE выполняет вызов возвращаемого тестового сообщения с ресурса.
PATCH
    PATCH используется для частичного изменения ресурса. 



4) HTTP статус коды сервера

все коды ответов можно разделить между собой на определенные классы.
Класс состояния обозначается 1 цифрой, которая должна определять состояние 
веб-страницы, две остальные цифры носят уточняющий характер.

Выделяют 5 классов кодов по состоянию:

    1хх – группа информационных кодов. Их задача состоит в обработке информации, создании сообщения о том, что текущий запрос принят, и передаче данных.
    2хх – успешная обработка запроса. Запрос уже получен сервером и успешно выполнен без каких-либо ошибок.
    3хх – перенаправление (англ. redirect). Данный код сообщает о текущей необходимости отправить запрос по иному адресу при смене расположения нужного файла.
    4хх – ошибки на стороне пользователя. Такие ошибки могут указывать на то, что данный файл по запрашиваемому адресу не найден.
    5хх – ошибки на стороне сервера. При выполнении запроса случился сбой сервера.

5) Что такое ядро браузера 
Ядро браузера

Ядро браузера можно разделить на две части: движок рендеринга (инженер макета или движок рендеринга) и движок JS.
Механизм рендеринга. Он отвечает за получение содержимого веб-страницы (HTML, XML, изображения и т. д.), 
организацию информации (например, добавление CSS и т. д.) и вычисление режима отображения веб-страницы, 
а затем вывод на монитор или принтер. Разница в ядре браузера будет по-разному интерпретировать синтаксис 
веб-страницы, поэтому эффект рендеринга также будет другим.
Механизм JS анализирует язык Javascript и выполняет язык Javascript для достижения динамического эффекта веб-страницы.

Сначала не было четкого различия между движком рендеринга и движком JS, 
а позже движок JS становился все более и более независимым, и ядро ​​ссылалось только 
на движок рендеринга. Команда проекта веб-стандартов создала ACID для проверки совместимости 
и производительности движка. Существует много типов ядер, таких как добавление некоммерческих 
бесплатных ядер, которые никто не использует, может быть более 10 видов, но общие ядра браузера
 можно разделить на четыре типа: Trident, Gecko, Blink, Webkit.

6) Какие браузеры какиие ядра используют

（1）Trident(IEЯдро)

Trident, который называется «Режим совместимости», является одним из ядер многих двухъядерных браузеров в Китае.
Представители: IE, Maxthon, Window of the World Browser, Avant, Tencent TT, Cheetah Secure Browser, 360 Speed ​​Browser, Baidu Browser и др.
После выпуска Window10 IE назвал свой встроенный браузер Edge, наиболее заметной особенностью Edge является новое ядро ​​EdgeHTML.

（2）Gecko(firefox)

Gecko (ядро Firefox): Mozilla FireFox (браузер Firefox) использует это ядро, для Gecko характерен полностью открытый код,
 поэтому его можно разрабатывать в высокой степени, и программисты по всему миру могут писать для него код и добавлять функции. 
Жаль, что эти годы упали, такие как медленная скорость открытия, частые обновления, свирепый напарник по команде, богоподобный хром противника.

（3） webkit(Safari)

Safari - это браузер, разработанный Apple, и название используемого ядра браузера - известный WebKit.
Сейчас многие люди по ошибке называют webkit ядром Chrome (даже если ядро ​​Chrome уже мигает), 
Apple чувствует, что у него украли жену, и они снова плачут и кружатся в туалете.
Типичные браузеры: Maxthon Browser 3, Apple Safari (Win / Mac / iPhone / iPad), 
мобильный браузер Symbian, браузер Android по умолчанию,

（4） Chromium/Bink(chrome)

В проекте Chromium механизм рендеринга Blink (то есть ядро ​​браузера) был разработан и встроен в браузер Chrome.
 Blink на самом деле является веткой WebKit.
В последней версии большинства отечественных браузеров используется ядро ​​Blink.

（5） Presto(Opera)

Presto является «предшественником» ядра норвежской браузерной оперы, поэтому его называют «предшественником», 
потому что последний браузер оперы давно отказался от него и поставил его в объятия Google.
Ядро браузера мобильного терминала в основном относится к ядру браузера, встроенного в систему.

В настоящее время в браузерах мобильных устройств чаще всего используются ядра Webkit, Blink, Trident, Gecko и т. Д.
 Среди них платформы Apple iOS, такие как iPhone и iPad, в основном WebKit, а ядро ​​браузера системы Android до Android 4.4 - это WebKit,
 переключение браузера системы Android4.4. В Chromium ядро ​​- Blink, ветвь Webkit, а браузерное ядро ​​системы Windows Phone 8 - Trident.

7) Что такое API
API расшифровывается как “интерфейс прикладного программирования” или “интерфейс программирования приложений”.
Он позволяет осуществлять связь и обмениваться данными между двумя отдельными модулями программы. Система программного обеспечения,
реализующая API, содержит функции/подпрограммы, которые могут быть выполнены с помощью другого программного обеспечения.

 Как работают API?

Архитектура API обычно объясняется с точки зрения клиента и сервера.
 Приложение, отправляющее запрос, называется клиентом, а приложение, 
отправляющее ответ, называется сервером. Итак, в примере с погодой база 
данных службы – это сервер, а мобильное приложение – это клиент. 

Существует четыре различных способа работы API в зависимости от того, 
когда и почему они были созданы.

8. Что такое ендпоинты

Что такое эндпоинт?

Эндпоинт (в переводе с англ. — конечная точка) представляет собой некий шлюз, который соединяет
 серверные процессы приложения с внешним интерфейсом. Простыми словами, это адрес, на который 
отправляются сообщения.

Чтобы понять, что такое эндпоинты, важно упомянуть работу API. API — аббревиатура от application 
programming interface, что переводится как программный интерфейс приложения. Приложения используют
 API для взаимодействия со сторонними приложениями и своими пользователями.

Чтобы связаться с API, нужно отправить ему запрос. Для корректной обработки запроса клиент должен
 предоставить универсальный указатель ресурса (URL), метод (HTTP method), и в зависимости от 
метода добавить заголовки (headers), тело (body), параметры запроса. Заголовки предоставляют 
метаданные о запросе, а тело содержит данные, например, поля для новой строки в базе данных.

Как работает API

API обработает запрос и отправит ответ, полученный от сервера. Ответ будет содержать код состояния, 
который является частью ответного сообщения HTTP, информирующего клиента о результате запроса. Например, 
код 200 используется, если операция завершилась успешно, 500 — если произошла внутренняя ошибка сервера.

Эндпоинты работают вместе с методами API. Это определенные URL-адреса, которые приложение использует 
для связи со сторонними службами и своими пользователями. URL — это роут, который может обрабатывать 
разные методы запроса. Каждый тип запроса — это отдельный эндпоинт. Существует пять основных типов:

    GET — получает информацию с сервера, не требует тела запроса;
    POST — создает в базе новый объект, требует тело запроса с полями этого объекта;
    PUT — полностью обновляет конкретный объект в базе данных;
    PATCH — аналогично PUT, обновляет определенный объект в базе данных, но обновляет только те поля, которые указаны в теле запроса;
    DELETE — удаляет объект из базы данных.

При формировании конкретного запроса к нему могут добавляться разные параметры. Комбинация 
этих параметров и URL представляет URI — Uniform Resource Identifier (унифицированный идентификатор ресурса), 
который указывает, где и как найти ресурс.

9) URL (URI, URL, URN)


    URI (Uniform Resource Identifier) ​​- это строка, используемая для идентификации имени определенного интернет-ресурса. 
Этот тип идентификации позволяет пользователям взаимодействовать с ресурсами в сети (обычно Всемирной паутиной) через определенный протокол.
    URL (Uniform Resource Locator, Uniform Resource Locator), наиболее распространенной формой является URI, часто обозначаемый как неофициальный URL.
    URN (Uniform Resource Name), его цель состоит в том, чтобы дополнить URL, предоставляя способ идентификации ресурсов в определенном пространстве имен.

Три отношения

URL является подмножеством URI, все URL являются URI, но не каждый URI является URL, и это может быть URN

10) Идемпотентные HTTP методы
Идемпотентный метод

Метод HTTP является идемпотентным, если повторный идентичный запрос, сделанный один или несколько раз 
подряд, имеет один и тот же эффект, не изменяющий состояние сервера. Другими словами,
 идемпотентный метод не должен иметь никаких побочных эффектов (side-effects), кроме 
сбора статистики или подобных операций. Корректно реализованные методы GET, HEAD, PUT 
и DELETE идемпотентны, но не метод POST. Также все безопасные методы являются 
идемпотентными.

Для идемпотентности нужно рассматривать только изменение фактического внутреннего
 состояния сервера, а возвращаемые запросами коды статуса могут отличаться: 
первый вызов DELETE вернёт код 200, в то время как последующие вызовы вернут
 код 404. Из идемпотентности DELETE неявно следует, что разработчики не 
должны использовать метод DELETE при реализации RESTful API с функциональностью 
удалить последнюю запись.

Обратите внимание, что идемпотентность метода не гарантируется сервером, 
и некоторые приложения могут нарушать ограничение идемпотентности.

GET /pageX HTTP/1.1 идемпотентен. Вызвавший несколько раз подряд этот 
запрос, клиент получит тот же результат:

GET /pageX HTTP/1.1
GET /pageX HTTP/1.1
GET /pageX HTTP/1.1
GET /pageX HTTP/1.1

POST /add_row HTTP/1.1 не идемпотентен; если его вызвать
 несколько раз, то он добавит несколько строк:

POST /add_row HTTP/1.1
POST /add_row HTTP/1.1   -> Adds a 2nd row
POST /add_row HTTP/1.1   -> Adds a 3rd row

DELETE /idX/delete HTTP/1.1 идемпотентен, даже если возвращаемый код отличается:

DELETE /idX/delete HTTP/1.1   -> Returns 200 if idX exists
DELETE /idX/delete HTTP/1.1   -> Returns 404 as it just got deleted
DELETE /idX/delete HTTP/1.1   -> Returns 404

11) Безопасные HTTP методы
Безопасный метод

Метод HTTP является безопасным, если он не меняет состояние 
сервера. Другими словами, безопасный метод проводит операции 
"только чтение" (read-only). Несколько следующих методов HTTP 
безопасные: GET, HEAD или OPTIONS. Все безопасные методы являются 
также идемпотентными, как и некоторые другие, но при этом небезопасные,
 такие как PUT или DELETE.

Даже если безопасные методы являются по существу "только для 
чтения", сервер всё равно может сменить своё состояние: например,
 он может сохранять статистику. Что существенно, так то, когда клиент 
вызывает безопасный метод, то он не запрашивает никаких изменений на сервере, 
и поэтому не создаёт дополнительную нагрузку на сервер. Браузеры могут вызывать
 безопасные методы, не опасаясь причинить вред серверу: это позволяет им выполнять 
некоторые действия, например, предварительная загрузка без риска. Поисковые роботы 
также полагаются на вызовы безопасных методов.

Безопасные методы не обязательно должны обрабатывать только 
статичные файлы; сервер может генерировать ответ "на-лету", пока скрипт,
 генерирующий ответ, гарантирует безопасность: он не должен вызывать внешних 
эффектов, таких как формирование заказов, отправка писем и др..

Правильная реализация безопасного метода - это ответственность 
серверного приложения, потому что сам веб-сервер, будь то Apache, nginx, 
IIS это соблюсти не сможет. В частности, приложение не должно разрешать изменение 
состояния сервера запросами GET.

Вызов безопасного метода, не меняющего состояния сервера:

GET /pageX.html HTTP/1.1

Вызов небезопасного метода, который может поменять состояние сервера:

POST /pageX.html HTTP/1.1 

Вызов идемпотентного, но небезопасного метода:

DELETE /idX/delete HTTP/1.1

12) Иденфикация, Аутентификация, Авторизация


    Идентификация — процедура, в результате выполнения которой для 
субъекта идентификации выявляется его идентификатор, однозначно определяющий 
этого субъекта в информационной системе.
    Аутентификация — процедура проверки подлинности, например 
проверка подлинности пользователя путем сравнения введенного им пароля 
с паролем, сохраненным в базе данных.
    Авторизация — предоставление определенному лицу или группе лиц
 прав на выполнение определенных действий.

13) Что такое IP

IP-адрес – это уникальный адрес, идентифицирующий устройство в интернете или локальной сети. 
IP означает «Интернет-протокол» – набор правил, регулирующих формат данных, отправляемых через интернет или локальную сеть.

По сути, IP-адрес – это идентификатор, позволяющий передавать информацию между устройствами
 в сети: он содержит информацию о местоположении устройства и обеспечивает его доступность для связи. 
IP-адреса позволяют различать компьютеры, маршрутизаторы и веб-сайты в интернете и являются важным компонентом работы интернета.
Что такое IP-адрес?

IP-адрес – это строка чисел, разделенных точками. IP-адреса представляют собой набор из четырех чисел,
 например, 192.158.1.38. Каждое число в этом наборе принадлежит интервалу от 0 до 255. Таким образом, 
полный диапазон IP-адресации – это адреса от 0.0.0.0 до 255.255.255.255.

IP-адреса не случайны. Они рассчитываются математически и распределяются Администрацией адресного 
пространства Интернета (Internet Assigned Numbers Authority, IANA), подразделением Корпорации по 
присвоению имен и номеров в Интернете (Internet Corporation for Assigned Names and Numbers, ICANN). 
ICANN – это некоммерческая организация, основанная в США в 1998 году с целью поддержки безопасности
 интернета и обеспечения его доступности для всех пользователей. Каждый раз, когда кто-либо регистрирует 
домен в интернете, он пользуется услугами регистратора доменных имен, который платит ICANN небольшой
 сбор за регистрацию домена.

14) Что такое октаты в DNS


Основы DNS

Все компьютеры, подключенные к Интернету, включая смартфоны, настольные компьютеры и серверы, 
предоставляющие контент для огромных торговых веб-сайтов, находят друг друга и обмениваются 
информацией с помощью цифр. Эти цифры называются IP-адресами. Чтобы открыть веб-сайт в браузере,
 не требуется запоминать длинные наборы цифр. Достаточно ввести доменное имя, например example.com, 
и браузер откроет нужную страницу.

Служба DNS, например Amazon Route 53, – это глобальный распределенный сервис, преобразующий доменные 
имена, удобные для человеческого восприятия (например, www.example.com), в числовые IP-адреса (например, 
192.0.2.1), используемые для взаимодействия компьютеров. Система DNS в Интернете очень похожа на телефонную 
книгу, которая устанавливает привязку имен абонентов к их телефонным номерам. Серверы DNS преобразуют 
запросы по именам в IP-адреса, обеспечивая соединение конечного пользователя с определенным сервером 
при вводе доменного имени в веб-браузер пользователя. Такие сообщения называются запросами.

15) Что такое порт, сколько портов у Linux сервера

Порт — логический объект, который представляет собой конечную точку связи и связан с 
процессом или службой в операционной системе.

UDP — это ещё один протокол транспортного уровня. Он тоже базируется на IP 
и тоже использует порты, но в отличие от TCP он не устанавливает соединений
 и не требует подтверждения получения каждого пакета.
Поэтому пакеты могут теряться или приходить в неправильном порядке. 
Зато этот протокол быстрее и использует меньше ресурсов.
На UDP обычно базируют прикладные протоколы, которым скорость доставки
 данных важнее надежности, например для передачи потокового видео,
 общения голосом или онлайн-игр. 
TCP протокол базируется на IP для доставки пакетов, но добавляет
 две важные вещи:

    установление соединения — это позволяет ему, в отличие от IP,
 гарантировать доставку пакетов
    порты — для обмена пакетами между приложениями, а не просто
 узлами

Протокол TCP предназначен для обмена данными — это «надежный» протокол, потому что:

    Обеспечивает надежную доставку данных, так как предусматривает 
установления логического соединения;
    Нумерует пакеты и подтверждает их прием квитанцией, а в случае
 потери организует повторную передачу;
    Делит передаваемый поток байтов на части — сегменты - и передает
 их нижнему уровню, на приемной стороне снова собирает их в непрерывный поток байтов.


16) Уровни OSI
Сетевая модель OSI (англ. open systems interconnection basic reference model) - 
концептуальная модель, которая обобщает и стандартизирует представление средств 
сетевого взаимодействия в телекоммуникационных и компьютерных системах, независимо
 от их внутреннего устройства и используемых технологий. Модель OSI была разработана
 в 1984 году Международной организацией стандартизации (ISO). Основной целью ее
 создания был поиск решения проблемы несовместимости устройств, использующих
 различные коммуникационные протоколы, путем перехода на единый, общий для 
всех систем стек протоколов. 

Описание уровней модели OSI
Уровень 	Функции 	PDU 	Примеры
7. Прикладной 	Некоторое высокоуровневое API 	Данные 	HTTP, FTP
Прикладной уровень (уровень приложений; англ. application layer) — 
верхний уровень модели, обеспечивающий взаимодействие пользовательских приложений с сетью: 

6. Представительский 	Представление данных между сетевым сервисом и приложением 	Данные 	ASCII, EBCDIC, JPEG
Уровень представления (англ. presentation layer) обеспечивает преобразование протоколов 
и кодирование/декодирование данных. Запросы приложений, полученные с прикладного уровня,
 на уровне представления преобразуются в формат для передачи по сети, а полученные из сети 
данные преобразуются в формат приложений. На этом уровне может осуществляться сжатие/распаковка
 или шифрование/дешифрование, а также перенаправление запросов другому сетевому ресурсу, если 
они не могут быть обработаны локально. 

5. Сеансовый 	Управление сеансами: продолжительный обмен информацией в виде множества
 передач между нодами 	Данные 	RPC, PAP 
Сеансовый уровень (англ. session layer) модели обеспечивает 
поддержание сеанса связи, позволяя приложениям взаимодействовать
 между собой длительное время. Уровень управляет созданием/завершением сеанса,
 обменом информацией, синхронизацией задач, определением права на передачу данных 
и поддержанием сеанса в периоды неактивности приложений. 

4. Транспортный 	Надёжная передача сегментов между двумя нодами в сети 	Сегменты/Датаграммы 	TCP, UDP
Транспортный уровень (англ. transport layer) модели предназначен для обеспечения надёжной передачи данных от отправителя к получателю. 

3. Сетевой 	Структуризация и управление множеством нод в сети 	Пакеты 	IPv4, IPv6
Сетевой уровень (англ. network layer) модели предназначен для определения пути передачи данных. Отвечает за трансляцию логических адресов 
и имён в физические, определение кратчайших маршрутов, коммутацию и маршрутизацию, отслеживание неполадок и «заторов» в сети. 

2. Канальный 	Надёжная передача датафреймов между двумя нодами соединённых физическим уровнем 	Фреймы 	PPP, IEEE 802.2, Ethernet
Канальный уровень (англ. data link layer) предназначен для обеспечения взаимодействия
 сетей на физическом уровне и контроля ошибок, которые могут возникнуть. 

1. Физический 	Передача и приём потока байтов через физическое устройство 	Биты 	USB, витая пара 
Физический уровень (англ. physical layer) — нижний уровень модели, который определяет метод передачи
 данных, представленных в двоичном виде, от одного устройства (компьютера) к другому. 


17) Хедеры http запросов
Заголовки HTTP позволяют клиенту и серверу отправлять дополнительную информацию с HTTP запросом или ответом. 
В HTTP-заголовке содержится не чувствительное к регистру название, а затем после (:) непосредственно значение. 
Пробелы перед значением игнорируются.
HTTP-заголовки сопровождают обмен данными по протоколу HTTP. Они могут содержать описание данных и информацию,
 необходимую для взаимодействия между клиентом и сервером. Заголовки и их статусы перечислены в реестре IANA, 
который постоянно обновляется.
Все заголовки разделяются на четыре основных группы:

    General Headers (рус. Общие заголовки) — используются в запросах и ответах.
    Request Headers (рус. Заголовки запроса) — используются только в запросах.
    Response Headers (рус. Заголовки ответа) — используются только в ответах.
    Entity Headers (рус. Заголовки сущности) — сопровождают каждую сущность сообщения. Используются в запросах и ответах.

Заголовки также могут быть сгруппированы согласно тому, как прокси (proxies) обрабатывают их:

    Connection
    Keep-Alive (en-US)
    Proxy-Authenticate (en-US)
    Proxy-Authorization (en-US)
    TE (en-US)
    Trailer (en-US)
    Transfer-Encoding (en-US)
    Upgrade (en-US).

Сквозные заголовки
     Эти заголовки должны быть переданы конечному получателю сообщения: серверу для запроса
 или клиенту для ответа. Промежуточные прокси-серверы должны повторно передавать эти заголовки 
без изменений, а кеши должны их хранить.

Хоп-хоп заголовки (Хоп-хоп заголовки)
     Эти заголовки имеют смысл только для одного соединения транспортного уровня и не должны 
повторно передаваться прокси или кешироваться. Обратите внимание, что с помощью общего заголовка 
Connection могут быть установлены только заголовки переходов.